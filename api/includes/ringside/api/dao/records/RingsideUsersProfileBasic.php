<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RingsideUsersProfileBasic extends Doctrine_Record
{

	public function setTableDefinition()
	{
		$this->setTableName('users_profile_basic');
		$this->hasColumn('user_id', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => true, 'default' => '', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('first_name', 'string', 100, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(100)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('last_name', 'string', 100, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(100)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('dob', 'date', null, array('alltypes' => array(0 => 'date'), 'ntype' => 'date', 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('sex', 'enum', 1, array('alltypes' => array(0 => 'enum', 1 => 'boolean', 2 => 'integer'), 'ntype' => 'enum(\'M\',\'F\')', 'fixed' => false, 'values' => array(0 => 'M', 1 => 'F'), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('political', 'enum', 17, array('alltypes' => array(0 => 'enum', 1 => 'integer'), 'ntype' => 'enum(\'Very Liberal\',\'Liberal\',\'Moderate\',\'Conservative\',\'Very Conservative\',\'Other\')', 'fixed' => false, 'values' => array(0 => 'Very Liberal', 1 => 'Liberal', 2 => 'Moderate', 3 => 'Conservative', 4 => 'Very Conservative', 5 => 'Other'), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('religion', 'string', 100, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(100)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('timezone', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(2)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('status_message', 'string', 200, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(200)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('status_update_time', 'timestamp', null, array('alltypes' => array(0 => 'timestamp'), 'ntype' => 'datetime', 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('pic_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('pic_big_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('pic_small_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('pic_square_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
	}

	public function setUp()
	{
		parent::setUp();
		
		$this->actAs('Timestampable', array('created' =>  array('name'    =>  'created',
                                                                'type'    =>  'timestamp',
                                                                'format'  =>  'Y-m-d H:i:s',
                                                                'disabled' => false,
                                                                'options' =>  array()),
                                            'updated' =>  array('name'    =>  'modified',
                                                                'type'    =>  'timestamp',
                                                                'format'  =>  'Y-m-d H:i:s',
                                                                'disabled' => false,
                                                                'options' =>  array())));
	}

}