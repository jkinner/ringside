<?php

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RingsideUsersApp extends Doctrine_Record
{

	public function setTableDefinition()
	{
		$this->setTableName('users_app');
		$this->hasColumn('app_id', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => false, 'default' => '', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('user_id', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => false, 'default' => '', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('allows_status_update', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('allows_create_listing', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('allows_photo_upload', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('fbml', 'string', null, array('alltypes' => array(0 => 'string', 1 => 'clob'), 'ntype' => 'text', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('auth_information', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('auth_profile', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('auth_leftnav', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('auth_newsfeeds', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('enabled', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('profile_col', 'enum', 6, array('alltypes' => array(0 => 'enum', 1 => 'integer'), 'ntype' => 'enum(\'narrow\',\'wide\')', 'fixed' => false, 'values' => array(0 => 'narrow', 1 => 'wide'), 'primary' => false, 'default' => 'wide', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('profile_order', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('id', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => true, 'notnull' => true, 'autoincrement' => true));
		
		$this->index('unique', array('fields' => array('user_id', 'app_id'), 'type' => 'unique'));
	}

	public function setUp()
	{
		parent::setUp();
		$this->hasOne('RingsideApp', array('local' => 'app_id', 'foreign' => 'id'));
		$this->hasOne('RingsideUser', array('local' => 'user_id', 'foreign' => 'id'));
		$this->actAs('Timestampable', array('created' =>  array('name'    =>  'created',
                                                                'type'    =>  'timestamp',
                                                                'format'  =>  'Y-m-d H:i:s',
                                                                'disabled' => false,
                                                                'options' =>  array()),
                                            'updated' =>  array('name'    =>  'modified',
                                                                'type'    =>  'timestamp',
                                                                'format'  =>  'Y-m-d H:i:s',
                                                                'disabled' => false,
                                                                'options' =>  array())));
	}
}
