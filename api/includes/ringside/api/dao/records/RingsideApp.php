<?php
// These cannot be autoloaded by Doctrine
require_once ('ringside/api/dao/records/RingsideUser.php');
require_once ('ringside/api/dao/records/RingsideUsersApp.php');
require_once ('ringside/api/dao/records/RingsideAppKey.php');
require_once ('ringside/api/dao/records/RingsideDeveloperApp.php');

/**
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RingsideApp extends Doctrine_Record
{
	public function setTableDefinition()
	{
		$this->setTableName('app');
		$this->hasColumn('id', 'integer', 4, array('alltypes' => array(0 => 'integer'), 'ntype' => 'int(10) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => true, 'notnull' => true, 'autoincrement' => true));
		$this->hasColumn('callback_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('name', 'string', 255, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(255)', 'fixed' => false, 'values' => array(), 'primary' => false, 'default' => '', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('canvas_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'default' => '', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('sidenav_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'default' => '', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('isdefault', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('desktop', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('developer_mode', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('author', 'string', 255, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(255)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('author_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('author_description', 'string', null, array('alltypes' => array(0 => 'string', 1 => 'clob'), 'ntype' => 'text', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('support_email', 'string', 255, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(255)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('canvas_type', 'integer', 2, array('alltypes' => array(0 => 'integer'), 'ntype' => 'smallint(5) unsigned', 'unsigned' => 1, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('application_type', 'string', 10, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(10)', 'fixed' => false, 'values' => array(), 'primary' => false, 'default' => 'WEB', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('mobile', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('deployed', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '0', 'notnull' => true, 'autoincrement' => false));
		$this->hasColumn('description', 'string', null, array('alltypes' => array(0 => 'string', 1 => 'clob'), 'ntype' => 'text', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('default_fbml', 'string', null, array('alltypes' => array(0 => 'string', 1 => 'clob'), 'ntype' => 'text', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('tos_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('icon_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('postadd_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('postremove_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('privacy_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('ip_list', 'string', 2048, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(2048)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('about_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('logo_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('edit_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('default_column', 'integer', 1, array('alltypes' => array(0 => 'integer', 1 => 'boolean'), 'ntype' => 'tinyint(1)', 'unsigned' => 0, 'values' => array(), 'primary' => false, 'default' => '1', 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('attachment_action', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
		$this->hasColumn('attachment_callback_url', 'string', 1024, array('alltypes' => array(0 => 'string'), 'ntype' => 'varchar(1024)', 'fixed' => false, 'values' => array(), 'primary' => false, 'notnull' => false, 'autoincrement' => false));
	}
	
	public function setUp()
	{
		parent::setUp();
		$this->hasMany('RingsideKeyring', array('local' => 'id', 'foreign' => 'entity_id'));
		$this->hasMany('RingsideUser as users', array('local' => 'app_id', 'foreign' => 'user_id', 'refClass' => 'RingsideUsersApp', 'onDelete' => 'CASCADE'));
		$this->hasMany('RingsideUser as developers', array('local' => 'app_id', 'foreign' => 'user_id', 'refClass' => 'RingsideDeveloperApp', 'onDelete' => 'CASCADE'));
		$this->hasMany('RingsideAppKey as keys', array('local' => 'id', 'foreign' => 'app_id', 'onDelete' => 'CASCADE'));
		
		$this->actAs('Timestampable', array('created' =>  array('name'    =>  'created',
                                                                'type'    =>  'timestamp',
                                                                'format'  =>  'Y-m-d H:i:s',
                                                                'disabled' => false,
                                                                'options' =>  array()),
                                            'updated' =>  array('name'    =>  'modified',
                                                                'type'    =>  'timestamp',
                                                                'format'  =>  'Y-m-d H:i:s',
                                                                'disabled' => false,
                                                                'options' =>  array())));
	}
}

