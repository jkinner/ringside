<?xml version="1.0" encoding="UTF-8"?>
<Module>
  <ModulePrefs title="OpenSocial 0.7 Compliance Tests" author_email="doll@google.com">
    <Require feature="opensocial-0.7"></Require>
    <Require feature="dynamic-height"></Require>
  </ModulePrefs>
    <Content type="html">
<![CDATA[
<style type="text/css">
  body {font-family: arial, sans-serif;}

  .compliance-results th {background-color: lightgrey;}
  .compliance-results td {padding: 4px; border: 1px dotted lightgrey;}
  .compliance-results tr {border: 1px dotted lightgrey;}
  .compliance-results {
      border: 1px solid black;
      border-collapse: collapse;
   }
  .compliance-error {background-color: #FF4444; font-weight: bolder}
  .compliance-pass {background-color: #BBFFAA}
  .compliance-warning {background-color: lightyellow}
</style>


<script type="text/javascript">
var totalTests;
var passedTests;
var failedTests;

gadgets.util.registerOnLoadHandler(resetTest);

gadgets.util.registerOnLoadHandler(testAllowedFunctions);
gadgets.util.registerOnLoadHandler(testDomain);
gadgets.util.registerOnLoadHandler(testSupportsField);
gadgets.util.registerOnLoadHandler(testPeopleReturnTypes);
gadgets.util.registerOnLoadHandler(testRequestCreateActivity1);
gadgets.util.registerOnLoadHandler(testRequestCreateActivity2);
gadgets.util.registerOnLoadHandler(testRequestCreateActivity3);
//gadgets.util.registerOnLoadHandler(testSavingBadData1);
gadgets.util.registerOnLoadHandler(testSavingGoodData1);
gadgets.util.registerOnLoadHandler(testFetchPeopleBadly1);
gadgets.util.registerOnLoadHandler(testFetchActivities);

function resetTest() {
  totalTests = {};
  totalTests[0] = 9;
  totalTests[2] = 2;

  passedTests = {};
  passedTests[0] = 0;
  passedTests[2] = 0;

  failedTests = {};
  failedTests[0] = 0;
  failedTests[2] = 0;

  function resetTable(table) {
    while(table.childNodes.length > 0) {
      table.removeChild(table.childNodes[0]);
    }

    var th1 = document.createElement("th");
    th1.innerHTML = "Test name";
    var th2 = document.createElement("th");
    th2.innerHTML = "Result";

    var newRow = document.createElement("tr");
    newRow.appendChild(th1);
    newRow.appendChild(th2);
    table.appendChild(newRow);
  }

  var table1 = document.getElementById("compliance-results-p0");
  var table2 = document.getElementById("compliance-results-p2");
  resetTable(table1);
  resetTable(table2);
}

// TODO: Check some friend requests
// TODO: If activity fetching is supported, assert get activity objects back with right params

function testFetchActivities() {
  var testName = "fetch activities";
  var errorLevel = 0;
  var errorMessages = "", warningMessages = "";

  var env = opensocial.getEnvironment();

  var supportedFields = [];
  for (var field in opensocial.Activity.Field) {
    if (env.supportsField('activity', opensocial.Activity.Field[field])) {
      supportedFields.push(opensocial.Activity.Field[field]);
    }
  }
  if (supportedFields.length == 0) {
    addErrorRow(testName, errorLevel, "You don't support any activity fields right now!");
    return;
  }

  var req = opensocial.newDataRequest();
  req.add(req.newFetchActivitiesRequest("VIEWER"), "activities");

  try {
    req.send(function(dataResponse) {
      if (!dataResponse || !dataResponse.get("activities")) {
        addErrorRow(testName, errorLevel, "When passed a valid activities request you must return a dataResponse");
      } else if (dataResponse.hadError()) {
        if (dataResponse.get("activities").getErrorCode() == opensocial.ResponseItem.Error.BAD_REQUEST) {
          addErrorRow(testName, errorLevel, "When passed a valid activities request you should return successfully "
              + "and not pass the Bad Request error code");
        } else {
          addWarningRow(testName, errorLevel, "Could not fetch activities for the viewer");
          addPassRow(testName, errorLevel);
        }
      } else {
        var activities = dataResponse.get("activities").getData()["activities"];
        for (var i = 0; i < activities.length; i++) {
          if (activities[i] instanceof opensocial.Activity) {
            var messages = checkActivityObjectTypes(activities[i], supportedFields);
            warningMessages += messages.warningMessages;
            errorMessages += messages.errorMessages;
          } else {
            errorMessages += "The fetched activity was not of type opensocial.Activity";
            break;
          }
        }

        if (warningMessages) {
          addWarningRow(testName, errorLevel, warningMessages);
        }

        if (errorMessages) {
          addErrorRow(testName, errorLevel, errorMessages);
        } else {
          addPassRow(testName, errorLevel);
        }
      }
    });
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When passed a valid request to fetch activities your code should not " +
        "throw an exception");
  }

}

function testFetchPeopleBadly1() {
  var testName = "fetch people";
  var errorLevel = 2;

  var req = opensocial.newDataRequest();

  try {
    req.add(req.newFetchPeopleRequest(true), 'badRequest');
    req.send(function(dataResponse) {
      if (!dataResponse
          || !dataResponse.hadError()
          || !dataResponse.get("badRequest")
          || (dataResponse.get("badRequest").getErrorCode() != opensocial.ResponseItem.Error.BAD_REQUEST
              && dataResponse.get("badRequest").getErrorCode() != opensocial.ResponseItem.Error.NOT_IMPLEMENTED)) {
        addErrorRow(testName, errorLevel, "When passed an invalid idSpec to fetch people "
            + "you should return the Bad Request error code");
      } else {
        addPassRow(testName, errorLevel);
      }
    });
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When passed an invalid idSpec to fetch people your code should not " +
        "throw an exception");
  }
}

function testSavingGoodData1() {
  var testName = "update person app data";
  var errorLevel = 0;

  var req = opensocial.newDataRequest();
  req.add(req.newUpdatePersonAppDataRequest('VIEWER', 'goodKey', 'goodValue'), 'viewerData');

  try {
    req.send(function(dataResponse) {
      if (!dataResponse || !(dataResponse instanceof opensocial.DataResponse)) {
        addErrorRow(testName, errorLevel, "When saving app data you must pass a dataResponse object to the user's callback");
      } else if (dataResponse.hadError()) {
        var errorCode = dataResponse.get('viewerData').getErrorCode();
        if (errorCode == opensocial.ResponseItem.Error.BAD_REQUEST) {
          addErrorRow(testName, errorLevel, "You should not return a bad request error when the user saves valid viewer data.");
        } else {
          addWarningRow(testName, errorLevel, "Could not save data for the viewer.");
          addPassRow(testName, errorLevel);
        }
      } else {
        // The data was saved successfully, so we should try to fetch it.
        var req2 = opensocial.newDataRequest();
        req2.add(req2.newFetchPersonRequest('VIEWER'), 'viewer');
        req2.add(req2.newFetchPersonAppDataRequest('VIEWER', 'goodKey'), 'viewerData');
        req2.send(function(dataResponse) {
          var viewer = dataResponse.get("viewer").getData();
          var allData = dataResponse.get("viewerData").getData();
          if (!dataResponse.hadError() && allData[viewer.getId()]["goodKey"] == "goodValue") {
            addPassRow(testName, errorLevel);
          } else {
            addErrorRow(testName, errorLevel, "Data saved to the viewer's data store could not be fetched out. "
                + " The value was: " + allData[viewer.getId()]["goodKey"] + " It may have had an error: "
                + dataResponse.get("viewerData").getErrorCode());
          }
        });
      }
    });
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When saving valid app data for the viewer your code should not " +
        "throw an exception");
  }
}

function testSavingBadData1() {
  var testName = "update person app data";
  var errorLevel = 0;

  var req = opensocial.newDataRequest();
  req.add(req.newUpdatePersonAppDataRequest('VIEWER', 'badKey::!!'), 'viewerData');

  try {
    req.send(function(dataResponse) {

      if (!dataResponse
          || !dataResponse.hadError()
          || !dataResponse.get("viewerData")
          || (dataResponse.get("viewerData").getErrorCode() != opensocial.ResponseItem.Error.BAD_REQUEST
              && dataResponse.get("viewerData").getErrorCode() != opensocial.ResponseItem.Error.NOT_IMPLEMENTED)) {
        addErrorRow(testName, errorLevel, "When passed an app data key with chars that are  "
            + "not alphanumeric, dots, dashes or underscores you should "
            + "return the Bad Request error code");
      } else {
        addPassRow(testName, errorLevel);
      }
    });
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When passed an invalid app data key your code should not " +
        "throw an exception");
  }
}


function isMethodDefined(method) {
  var splitNames = method.split('.');
  var parentObject = window;
  for (var i = 0; i < splitNames.length; i++) {
    var childObject = parentObject[splitNames[i]];
    if (!childObject) {
      return false;
    } else {
      parentObject = childObject;
    }
  }
  return true;
}

function testAllowedFunctions() {
  var testName = "allowed functions";
  var errorLevel = 0;

  var missingFunctions = "";

  for (var i = 0; i < requiredMethods.length; i++) {
    var method = requiredMethods[i];
    if (!isMethodDefined(method)) {
      missingFunctions += method + "<br/>";
    }
  }

  if (missingFunctions) {
    addErrorRow(testName, errorLevel,
        "You must define the following functions in your api: <br/> " + missingFunctions);
  } else {
    addPassRow(testName, errorLevel);
  }
}

function testDomain() {
  var testName = "domain";
  var errorLevel = 0;
  if (opensocial.getEnvironment() && opensocial.getEnvironment().getDomain()) {
    addPassRow(testName, errorLevel);
  } else {
    addErrorRow(testName, errorLevel, "You must specify the domain on getEnvironment()");
  }
}

function testSupportsField() {
  var testName = "supports field";
  var errorLevel = 0;
  var errorMessages = "";
  var env = opensocial.getEnvironment();

  try {
    var shouldBeFalse = env.supportsField(null, null)
        || env.supportsField(opensocial.Environment.ObjectType.PERSON, null);
    if (shouldBeFalse) {
      addErrorRow(testName, 2, "supportsField() and supportsField(person) should return false.");
    }
  } catch (errorMsg) {
    errorMessages += "Your supports field method throws exceptions when passed null parameters<br/>";
  }

  if (!env.supportsField("person", "id")
      || !env.supportsField("person", "name")
      || !env.supportsField("person", "thumbnailUrl")
      || !env.supportsField("person", "profileUrl")) {
    errorMessages += "Your container must support the id, name, thumbnailUrl "
        + "and profileUrl fields on people objects<br/>";
  }

  if (errorMessages) {
    addErrorRow(testName, errorLevel, errorMessages);
  } else {
    addPassRow(testName, errorLevel);
  }
}

// Test that dataRequests have the right defaults
// Test that requestMethods call the callback with error codes when passed bad data...

function testRequestCreateActivity1() {
  var testName = "request create activity";
  var errorLevel = 2;

  try {
    opensocial.requestCreateActivity(null, null, function(responseItem) {
      if (responseItem == null
          || !responseItem.hadError()
          || responseItem.getErrorCode() != opensocial.ResponseItem.Error.BAD_REQUEST) {
        addErrorRow(testName, errorLevel, "When passed a null activity you should " +
            "return the Bad Request error code");
      } else {
        addPassRow(testName, errorLevel);
      }
    });
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When passed a null activity your code should not " +
        "throw an exception");
  }
}

function testRequestCreateActivity2() {
  var testName = "request create activity";
  var errorLevel = 0;

  try {
    opensocial.requestCreateActivity(opensocial.newActivity({}), "LOW", null);
    addPassRow(testName, errorLevel);
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When not passed a callback, your code should not "
        + "throw an exception");
  }
}

function testRequestCreateActivity3() {
  var testName = "request create activity";
  var errorLevel = 0;

  try {
    opensocial.requestCreateActivity(opensocial.newActivity({}), "LOW",
        function(responseItem) {
      if (responseItem == null || !responseItem.hadError() || !responseItem.getErrorCode
          || (responseItem.getErrorCode() != opensocial.ResponseItem.Error.BAD_REQUEST
              && responseItem.getErrorCode() != opensocial.ResponseItem.Error.NOT_IMPLEMENTED)) {
        addErrorRow(testName, errorLevel, "When passed an activity without a title you should " +
            "return the Bad Request error code");
      } else {
        addPassRow(testName, errorLevel);
      }
    });
  } catch (errMsg) {
    addErrorRow(testName, errorLevel, "When passed an activity without a title, your code should not "
        + "throw an exception");
  }
}

function testPeopleReturnTypes() {
  var testName = "people field return types";
  var errorLevel = 0;
  var env = opensocial.getEnvironment();

  var supportedFields = [];
  for (var field in opensocial.Person.Field) {
    if (env.supportsField('person', opensocial.Person.Field[field])) {
      supportedFields.push(opensocial.Person.Field[field]);
    }
  }
  if (supportedFields.length == 0) {
    addErrorRow(testName, errorLevel, "You don't support any person fields right now!");
    return;
  }

  addInfoRow(testName, errorLevel, "Your supported person fields: " + supportedFields.join(", "));

  var req = opensocial.newDataRequest();
  req.add(req.newFetchPersonRequest('OWNER', {'profileDetail' : supportedFields}), 'owner');
  req.add(req.newFetchPersonRequest('VIEWER', {'profileDetail' : supportedFields}), 'viewer');

  req.send(function(response) {
    if (!response.get('owner') || !response.get('owner').getData()) {
      addErrorRow(testName, errorLevel, "Could not fetch profile information for the owner.");
      return;
    }

    // Check owner data
    var ownerObject = response.get('owner').getData();
    if (!ownerObject instanceof opensocial.Person) {
      addErrorRow(testName, errorLevel, "Owner was not of type opensocial.Person");
      return;
    }

    var errorMessages = "";
    var warningMessages = "";

    if (!ownerObject.isOwner()) {
      errorMessages += "Your owner should return true when isOwner is called.<br/>";
    }
    var result = checkPersonObjectTypes(ownerObject, supportedFields);
    errorMessages += result.errorMessages;
    warningMessages += result.warningMessages;


    // Check viewer data
    if (!response.get('viewer')
        || (!response.get('viewer').getData()
            && response.get('viewer').getErrorCode() != opensocial.ResponseItem.Error.UNAUTHORIZED)) {
      errorMessages += "You need to either return viewer data or return the "
          + "UNAUTHORIZED error code on the response item<br/>";
    } else {
      var viewerObject = response.get('viewer').getData();
      if (!viewerObject instanceof opensocial.Person) {
        errorMessages += "Viewer was not of type opensocial.Person";
      } else {
        if (!viewerObject.isViewer()) {
          errorMessages += "Your viewer should return true when isViewer is called.<br/>";
        }
        result = checkPersonObjectTypes(viewerObject, supportedFields);
        errorMessages += result.errorMessages;
        warningMessages += result.warningMessages;
      }
    }


    if (warningMessages) {
      addWarningRow(testName, errorLevel, warningMessages);
    }

    if (errorMessages) {
      addErrorRow(testName, errorLevel, errorMessages);
    } else {
      addPassRow(testName, errorLevel);
    }

  });
}

var keyRestrictionExpr = /^[\w\.\-]*$/g;

function checkPersonObjectTypes(dataObject, supportedFields) {
  var messages = checkObjectTypes(dataObject, supportedFields,
      peopleObjectFields, peopleArrayFields);

  var warningMessages = messages.warningMessages;
  var errorMessages = messages.errorMessages;

  if (!dataObject.getDisplayName()) {
    warningMessages += "Your person doesn't have a display name, this will be confusing for users<br/>";
  }


  var profileUrl = dataObject.getField("profileUrl");
  var thumbnailUrl = dataObject.getField("thumbnailUrl");
  if ((profileUrl && profileUrl.indexOf("http") != 0)
      || (thumbnailUrl && thumbnailUrl.indexOf("http") != 0)) {
      errorMessages += "The profile and thumbnail urls must be fully qualified urls. Your urls: "
          + profileUrl + ", " + thumbnailUrl + "<br/>";
  }

  return {'errorMessages' : errorMessages, 'warningMessages' : warningMessages};
}

function checkActivityObjectTypes(dataObject, supportedFields) {
  return checkObjectTypes(dataObject, supportedFields, activityObjectFields,
      activityArrayFields);
}

function checkObjectTypes(dataObject, supportedFields, objectFields, arrayFields) {
  var errorMessages  = "", warningMessages = "";

  if (!dataObject.getId()) {
    errorMessages += "Activity and person objects must have ids.<br/>";
  } else if (!dataObject.getId().match(keyRestrictionExpr)){
    // The spec does not limit length yet
    // It does however only allow certain characters
    errorMessages += "Object ids only allow (A-Za-z0-9) characters, "
        + "underscore(_), dot(.) or dash(-). Yours does not match this :"
        + dataObject.getId() + "<br/>";
  }

  for (var i = 0; i < supportedFields.length; i++) {
    var field = supportedFields[i];
    var data = dataObject.getField(field);
    if (!data) {
      warningMessages += "Your object did not have a result for the "
          + field + " field. This may be confusing for users. <br/>";
      continue;
    }
    if (objectFields[field]) {
      var objectToReturn = objectFields[field];
      if (!objectToReturn
          || (objectToReturn == String && typeof(data) != "string")
          || (objectToReturn != String && !(data instanceof objectToReturn))) {
        errorMessages += "The " + field + " field is not an " + objectToReturn + " object<br/>";
      }
    } else if (arrayFields[field]) {
      if (!(data instanceof Array)) {
        errorMessages += "The " + field + " must be an Array<br/>";
        continue;
      }

      var arrayObjectToReturn = arrayFields[field];
      for (var j = 0; j < data.length; j++) {
        if (!arrayObjectToReturn
            || (arrayObjectToReturn == String && typeof(data[j]) != "string")
            || (arrayObjectToReturn != String && !(data[j] instanceof arrayObjectToReturn))) {
          errorMessages += "The data at index " + j + " of the " + field
              + " field (" + data[j] + " - " + typeof(data[j]) + ")"
              + "is not an " + arrayObjectToReturn + " object<br/>";
          break;
        }
      }
    }
  }

  return {'errorMessages' : errorMessages, 'warningMessages' : warningMessages};
}

function addInfoRow(testName, errorLevel, message) {
  addRow("compliance-info", testName, errorLevel, message ? message : "");
}

function addWarningRow(testName, errorLevel, message) {
  addRow("compliance-warning", testName, errorLevel, message ? message : "");
}

function addErrorRow(testName, errorLevel, message) {
  addRow("compliance-error", testName, errorLevel, message ? message : "");
  failedTests[errorLevel] = failedTests[errorLevel] + 1;
  updateTotalTests();
}

function addPassRow(testName, errorLevel, message) {
  addRow("compliance-pass", testName, errorLevel, message ? message : "passed");
  passedTests[errorLevel] = passedTests[errorLevel] + 1;
  updateTotalTests();
}

function updateTotalTests() {
  function logResults(failed, passed, total, divId) {
    if (failed + passed >= total) {
      var className = failed > 0 ? "compliance-error" : "compliance-pass";
      document.getElementById(divId).innerHTML =
          "<b>" + passed + "/" + total + " tests passed</b>";
      document.getElementById(divId).className = className;
    }
  }

  logResults(failedTests[0], passedTests[0], totalTests[0], "finalResults-p0");
  logResults(failedTests[2], passedTests[2], totalTests[2], "finalResults-p2");
}

function addRow(className, test, errorLevel, result) {
  var td1 = document.createElement("td");
  td1.innerHTML = test;
  var td2 = document.createElement("td");
  td2.innerHTML = result;

  var newRow = document.createElement("tr");
  newRow.className = className;
  newRow.appendChild(td1);
  newRow.appendChild(td2);
  var id = "compliance-results-p" + errorLevel;
  var table = document.getElementById(id).appendChild(newRow);

  if (window["gadgets"]) {
    gadgets.window.adjustHeight();
  }
}



var activityObjectFields = {
  "title" : String,
  "titleId" : String,
  "templateParams" : Object, // Map from String to String
  "url" : String,
  "bodyId" : String,
  "body" : String,
  "externalId" : String,
  "streamTitle" : String,
  "streamUrl" : String,
  "streamSourceUrl" : String,
//  "priority" : number, who added this???
  "id" : String,
  "userId" : String,
  "appId" : String,
  "postedTime" : String
};

var activityArrayFields = {
  "mediaItems" : opensocial.Activity.MediaItem
};

var peopleObjectFields = {
  "aboutMe" : String,
//  "age" : number,
  "bodyType" : opensocial.BodyType,
  "children" : String,
  "currentLocation" : opensocial.Address,
  "dateOfBirth" : Date,
  "drinker" : opensocial.Enum,
  "ethnicity" : String,
  "fashion" : String,
  "gender" : opensocial.Enum,
  "happiestWhen" : String,
  "humor" : String,
  "id" : String,
  "jobInterests" : String,
  "livingArrangement" : String,
  "lookingFor" : String,
  "name" : opensocial.Name,
  "pets" : String,
  "politicalViews" : String,
  "profileSong" : opensocial.Url,
  "profileVideo" : opensocial.Url,
  "relationshipStatus" : String,
  "religion" : String,
  "romance" : String,
  "scaredOf" : String,
  "sexualOrientation" : String,
  "smoker" : opensocial.Enum,
  "status" : String,
  "thumbnailUrl" : String
//  "timeZone" : Number,
};

var peopleArrayFields = {
  "activities" : String,
  "addresses" : opensocial.Address,
  "books" : String,
  "cars" : String,
  "emails" : opensocial.Email,
  "food" : String,
  "heroes" : String,
  "interests" : String,
  "jobInterests" : String,
  "jobs" : opensocial.Organization,
  "languagesSpoken" : String,
  "movies" : String,
  "music" : String,
  "phoneNumbers" : opensocial.Phone,
  "quotes" : String,
  "schools" : opensocial.Organization,
  "sports" : String,
  "tags" : String,
  "turnOffs" : String,
  "turnOns" : String,
  "tvShows" : String,
  "urls" : opensocial.Url
};

// TODO: check languagesSpoken for iso codes
// TODO: check opensocial.Enums for their types, null or predefined

var requiredMethods = [
    'opensocial',
    'opensocial.getEnvironment',
    'opensocial.hasPermission',
    'opensocial.newActivity',
    'opensocial.newActivityMediaItem',
    'opensocial.newDataRequest',
    'opensocial.newMessage',
    'opensocial.requestCreateActivity',
    'opensocial.requestPermission',
    'opensocial.requestSendMessage',
    'opensocial.requestShareApp',

    'opensocial.Activity',
    'opensocial.Activity.prototype.getField',
    'opensocial.Activity.prototype.getId',
    'opensocial.Activity.prototype.setField',

    'opensocial.Activity.Field',
    'opensocial.Activity.Field.APP_ID',
    'opensocial.Activity.Field.BODY',
    'opensocial.Activity.Field.BODY_ID',
    'opensocial.Activity.Field.EXTERNAL_ID',
    'opensocial.Activity.Field.ID',
    'opensocial.Activity.Field.MEDIA_ITEMS',
    'opensocial.Activity.Field.POSTED_TIME',
    'opensocial.Activity.Field.PRIORITY',
    'opensocial.Activity.Field.STREAM_FAVICON_URL',
    'opensocial.Activity.Field.STREAM_SOURCE_URL',
    'opensocial.Activity.Field.STREAM_TITLE',
    'opensocial.Activity.Field.STREAM_URL',
    'opensocial.Activity.Field.TEMPLATE_PARAMS',
    'opensocial.Activity.Field.TITLE',
    'opensocial.Activity.Field.TITLE_ID',
    'opensocial.Activity.Field.URL',
    'opensocial.Activity.Field.USER_ID',

    'opensocial.Activity.MediaItem',
    'opensocial.Activity.MediaItem.prototype.getField',
    'opensocial.Activity.MediaItem.prototype.setField',

    'opensocial.Activity.MediaItem.Field',
    'opensocial.Activity.MediaItem.Field.MIME_TYPE',
    'opensocial.Activity.MediaItem.Field.TYPE',
    'opensocial.Activity.MediaItem.Field.URL',

    'opensocial.Activity.MediaItem.Type',
    'opensocial.Activity.MediaItem.Type.AUDIO',
    'opensocial.Activity.MediaItem.Type.IMAGE',
    'opensocial.Activity.MediaItem.Type.VIDEO',

    'opensocial.Address',
    'opensocial.Address.prototype.getField',

    'opensocial.Address.Field.COUNTRY',
    'opensocial.Address.Field.EXTENDED_ADDRESS',
    'opensocial.Address.Field.LATITUDE',
    'opensocial.Address.Field.LOCALITY',
    'opensocial.Address.Field.LONGITUDE',
    'opensocial.Address.Field.PO_BOX',
    'opensocial.Address.Field.POSTAL_CODE',
    'opensocial.Address.Field.REGION',
    'opensocial.Address.Field.STREET_ADDRESS',
    'opensocial.Address.Field.TYPE',
    'opensocial.Address.Field.UNSTRUCTURED_ADDRESS',

    'opensocial.BodyType',
    'opensocial.BodyType.prototype.getField',

    'opensocial.BodyType.Field.BUILD',
    'opensocial.BodyType.Field.EYE_COLOR',
    'opensocial.BodyType.Field.HAIR_COLOR',
    'opensocial.BodyType.Field.HEIGHT',
    'opensocial.BodyType.Field.WEIGHT',

    'opensocial.Collection',
    'opensocial.Collection.prototype.asArray',

    'opensocial.Collection.prototype.each',
    'opensocial.Collection.prototype.getById',
    'opensocial.Collection.prototype.getOffset',
    'opensocial.Collection.prototype.getTotalSize',
    'opensocial.Collection.prototype.size',

    'opensocial.CreateActivityPriority',
    'opensocial.CreateActivityPriority.HIGH',
    'opensocial.CreateActivityPriority.LOW',

    'opensocial.DataRequest',
    'opensocial.DataRequest.prototype.add',
    'opensocial.DataRequest.prototype.newFetchActivitiesRequest',
    'opensocial.DataRequest.prototype.newFetchPeopleRequest',
    'opensocial.DataRequest.prototype.newFetchPersonAppDataRequest',
    'opensocial.DataRequest.prototype.newFetchPersonRequest',
    'opensocial.DataRequest.prototype.newUpdatePersonAppDataRequest',
    'opensocial.DataRequest.prototype.send',

    'opensocial.DataRequest.FilterType',
    'opensocial.DataRequest.FilterType.ALL',
    'opensocial.DataRequest.FilterType.HAS_APP',

    'opensocial.DataRequest.Group',
    'opensocial.DataRequest.Group.OWNER_FRIENDS',
    'opensocial.DataRequest.Group.VIEWER_FRIENDS',

    'opensocial.DataRequest.PeopleRequestFields',
    'opensocial.DataRequest.PeopleRequestFields.FILTER',
    'opensocial.DataRequest.PeopleRequestFields.FIRST',
    'opensocial.DataRequest.PeopleRequestFields.MAX',
    'opensocial.DataRequest.PeopleRequestFields.PROFILE_DETAILS',
    'opensocial.DataRequest.PeopleRequestFields.SORT_ORDER',

    'opensocial.DataRequest.PersonId',
    'opensocial.DataRequest.PersonId.OWNER',
    'opensocial.DataRequest.PersonId.VIEWER',

    'opensocial.DataRequest.SortOrder',
    'opensocial.DataRequest.SortOrder.NAME',
    'opensocial.DataRequest.SortOrder.TOP_FRIENDS',

    'opensocial.DataResponse',
    'opensocial.DataResponse.prototype.get',
    'opensocial.DataResponse.prototype.hadError',

    'opensocial.Email',
    'opensocial.Email.prototype.getField',

    'opensocial.Email.Field',
    'opensocial.Email.Field.ADDRESS',
    'opensocial.Email.Field.TYPE',

    'opensocial.Enum',
    'opensocial.Enum.prototype.getDisplayValue',
    'opensocial.Enum.prototype.getKey',

    'opensocial.Enum.Drinker',
    'opensocial.Enum.Drinker.HEAVILY',
    'opensocial.Enum.Drinker.NO',
    'opensocial.Enum.Drinker.OCCASIONALLY',
    'opensocial.Enum.Drinker.QUIT',
    'opensocial.Enum.Drinker.QUITTING',
    'opensocial.Enum.Drinker.REGULARLY',
    'opensocial.Enum.Drinker.SOCIALLY',
    'opensocial.Enum.Drinker.YES',

    'opensocial.Enum.Gender',
    'opensocial.Enum.Gender.FEMALE',
    'opensocial.Enum.Gender.MALE',

    'opensocial.Enum.Smoker',
    'opensocial.Enum.Smoker.HEAVILY',
    'opensocial.Enum.Smoker.NO',
    'opensocial.Enum.Smoker.OCCASIONALLY',
    'opensocial.Enum.Smoker.QUIT',
    'opensocial.Enum.Smoker.QUITTING',
    'opensocial.Enum.Smoker.REGULARLY',
    'opensocial.Enum.Smoker.SOCIALLY',
    'opensocial.Enum.Smoker.YES',

    'opensocial.Environment',
    'opensocial.Environment.prototype.getDomain',
    'opensocial.Environment.prototype.supportsField',

    'opensocial.Environment.ObjectType',
    'opensocial.Environment.ObjectType.ACTIVITY',
    'opensocial.Environment.ObjectType.ACTIVITY_MEDIA_ITEM',
    'opensocial.Environment.ObjectType.ADDRESS',
    'opensocial.Environment.ObjectType.BODY_TYPE',
    'opensocial.Environment.ObjectType.EMAIL',
    'opensocial.Environment.ObjectType.FILTER_TYPE',
    'opensocial.Environment.ObjectType.MESSAGE',
    'opensocial.Environment.ObjectType.MESSAGE_TYPE',
    'opensocial.Environment.ObjectType.NAME',
    'opensocial.Environment.ObjectType.ORGANIZATION',
    'opensocial.Environment.ObjectType.PERSON',
    'opensocial.Environment.ObjectType.PHONE',
    'opensocial.Environment.ObjectType.SORT_ORDER',
    'opensocial.Environment.ObjectType.URL',

    'opensocial.Message',
    'opensocial.Message.prototype.getField',
    'opensocial.Message.prototype.setField',

    'opensocial.Message.Field',
    'opensocial.Message.Field.BODY',
    'opensocial.Message.Field.TITLE',
    'opensocial.Message.Field.TYPE',

    'opensocial.Message.Type',
    'opensocial.Message.Type.EMAIL',
    'opensocial.Message.Type.NOTIFICATION',
    'opensocial.Message.Type.PRIVATE_MESSAGE',
    'opensocial.Message.Type.PUBLIC_MESSAGE',

    'opensocial.Name',
    'opensocial.Name.prototype.getField',

    'opensocial.Name.Field',
    'opensocial.Name.Field.ADDITIONAL_NAME',
    'opensocial.Name.Field.FAMILY_NAME',
    'opensocial.Name.Field.GIVEN_NAME',
    'opensocial.Name.Field.HONORIFIC_PREFIX',
    'opensocial.Name.Field.HONORIFIC_SUFFIX',
    'opensocial.Name.Field.UNSTRUCTURED',

    'opensocial.Organization',
    'opensocial.Organization.prototype.getField',

    'opensocial.Organization.Field',
    'opensocial.Organization.Field.ADDRESS',
    'opensocial.Organization.Field.DESCRIPTION',
    'opensocial.Organization.Field.END_DATE',
    'opensocial.Organization.Field.FIELD',
    'opensocial.Organization.Field.NAME',
    'opensocial.Organization.Field.SALARY',
    'opensocial.Organization.Field.START_DATE',
    'opensocial.Organization.Field.SUB_FIELD',
    'opensocial.Organization.Field.TITLE',
    'opensocial.Organization.Field.WEBPAGE',

    'opensocial.Permission',
    'opensocial.Permission.VIEWER',

    'opensocial.Person',
    'opensocial.Person.prototype.getDisplayName',
    'opensocial.Person.prototype.getField',
    'opensocial.Person.prototype.getId',
    'opensocial.Person.prototype.isOwner',
    'opensocial.Person.prototype.isViewer',

    'opensocial.Person.Field',
    'opensocial.Person.Field.ABOUT_ME',
    'opensocial.Person.Field.ACTIVITIES',
    'opensocial.Person.Field.ADDRESSES',
    'opensocial.Person.Field.AGE',
    'opensocial.Person.Field.BODY_TYPE',
    'opensocial.Person.Field.BOOKS',
    'opensocial.Person.Field.CARS',
    'opensocial.Person.Field.CHILDREN',
    'opensocial.Person.Field.CURRENT_LOCATION',
    'opensocial.Person.Field.DATE_OF_BIRTH',
    'opensocial.Person.Field.DRINKER',
    'opensocial.Person.Field.EMAILS',
    'opensocial.Person.Field.ETHNICITY',
    'opensocial.Person.Field.FASHION',
    'opensocial.Person.Field.FOOD',
    'opensocial.Person.Field.GENDER',
    'opensocial.Person.Field.HAPPIEST_WHEN',
    'opensocial.Person.Field.HEROES',
    'opensocial.Person.Field.HUMOR',
    'opensocial.Person.Field.ID',
    'opensocial.Person.Field.INTERESTS',
    'opensocial.Person.Field.JOB_INTERESTS',
    'opensocial.Person.Field.JOBS',
    'opensocial.Person.Field.LANGUAGES_SPOKEN',
    'opensocial.Person.Field.LIVING_ARRANGEMENT',
    'opensocial.Person.Field.LOOKING_FOR',
    'opensocial.Person.Field.MOVIES',
    'opensocial.Person.Field.MUSIC',
    'opensocial.Person.Field.NAME',
    'opensocial.Person.Field.NICKNAME',
    'opensocial.Person.Field.PETS',
    'opensocial.Person.Field.PHONE_NUMBERS',
    'opensocial.Person.Field.POLITICAL_VIEWS',
    'opensocial.Person.Field.PROFILE_SONG',
    'opensocial.Person.Field.PROFILE_URL',
    'opensocial.Person.Field.PROFILE_VIDEO',
    'opensocial.Person.Field.QUOTES',
    'opensocial.Person.Field.RELATIONSHIP_STATUS',
    'opensocial.Person.Field.RELIGION',
    'opensocial.Person.Field.ROMANCE',
    'opensocial.Person.Field.SCARED_OF',
    'opensocial.Person.Field.SCHOOLS',
    'opensocial.Person.Field.SEXUAL_ORIENTATION',
    'opensocial.Person.Field.SMOKER',
    'opensocial.Person.Field.SPORTS',
    'opensocial.Person.Field.STATUS',
    'opensocial.Person.Field.TAGS',
    'opensocial.Person.Field.THUMBNAIL_URL',
    'opensocial.Person.Field.TIME_ZONE',
    'opensocial.Person.Field.TURN_OFFS',
    'opensocial.Person.Field.TURN_ONS',
    'opensocial.Person.Field.TV_SHOWS',
    'opensocial.Person.Field.URLS',

    'opensocial.Phone',
    'opensocial.Phone.prototype.getField',

    'opensocial.Phone.Field',
    'opensocial.Phone.Field.NUMBER',
    'opensocial.Phone.Field.TYPE',

    'opensocial.ResponseItem',
    'opensocial.ResponseItem.prototype.getData',
    'opensocial.ResponseItem.prototype.getErrorCode',
    'opensocial.ResponseItem.prototype.getErrorMessage',
    'opensocial.ResponseItem.prototype.getOriginalDataRequest',
    'opensocial.ResponseItem.prototype.hadError',

    'opensocial.ResponseItem.Error',
    'opensocial.ResponseItem.Error.BAD_REQUEST',
    'opensocial.ResponseItem.Error.FORBIDDEN',
    'opensocial.ResponseItem.Error.INTERNAL_ERROR',
    'opensocial.ResponseItem.Error.NOT_IMPLEMENTED',
    'opensocial.ResponseItem.Error.UNAUTHORIZED',

    'opensocial.Url',
    'opensocial.Url.prototype.getField',

    'opensocial.Url.Field',
    'opensocial.Url.Field.ADDRESS',
    'opensocial.Url.Field.LINK_TEXT',
    'opensocial.Url.Field.TYPE'
    ];

</script>

<div style="margin: 4px">
  <h3>OpenSocial 0.7 tests</h3>

  <h4>&nbsp;&nbsp;Overall Results:</br>
    &nbsp;&nbsp;&nbsp;P0 tests: <span style="padding: 0.1em" id="finalResults-p0"></span><br/>
    &nbsp;&nbsp;&nbsp;P2 tests: <span style="padding: 0.1em" id="finalResults-p2"></span>
  </h4>

  <h4>P0 tests</h4>
  <h5>Tests which must pass in order for a container to be spec compliant</h5>
  <table class="compliance-results" id="compliance-results-p0">
    <tr><th>Test name</th><th>Result</th></tr>
  </table>

  <br/><br/>

  <h4>P2 tests</h4>
  <h5>Tests which would be nice to pass for the user but aren't necessary.
      Includes things like not throwing exceptions when bad data is passed in.</h5>
  <table class="compliance-results" id="compliance-results-p2">
    <tr><th>Test name</th><th>Result</th></tr>
  </table>

  <br/><br/>
  <i>
    Refer to the
    <a href="http://code.google.com/apis/opensocial/docs/0.7/spec.html">OpenSocial 0.7 spec</a>
    for more information.
  </i>
</div>
]]>
</Content>
</Module>
